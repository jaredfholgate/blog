{
    "id": 8,
    "title": "MonoRepo vs Multiple Repo with some Microsoft .NET specifics",
    "date": "2018-08-17T20:47:00",
    "category": "Software Engineering",
    "tags": "MonoRepo,Process,Git,.NET",
    "summary": "An overview of the arguments for and against a MonoRepo vs Multiple Repo's. Specifically related to my experience of the Microsoft .NET world and recent innovations with the tooling. There is also a bonus section on merging multiple repositories into a MonoRepo whilst retaining git history for the files.",
    "content": "### Intro\r\n\r\nThis post is a discussion around why I am looking at a MonoRepo at all and what I see as the pro's and con's of a MonoRepo vs Multiple Repository. This topic is widely discussed elsewhere and these are just my views today given what I know right now.\r\n\r\nHistorically I have always worked with multiple repositories, usually one app, micro service, class library or solution in Microsoft terminology per repository. This has worked well for my team, but there are definitely some inefficiencies with working this way and recently I’ve been looking at MonoRepo as a way to address some of the process bottle necks I see.\r\n\r\nThe evolution of the tooling we use, particularly TFS and Visual Studio 2017 has also made this more of a realistic consideration.\r\n\r\n### What is a MonoRepo?\r\n\r\nJust in case you aren't already aware, the difference between a MonoRepo and Multiple Repos is;\r\n\r\n1. Multiple Repositories, you have a separate repository for each service / library you develop and combine them into a whole application at build / integration time.\r\n2. MonoRepo, instead of separate repositories, you have a single repository with a folder structure inside it. Each folder contain an individual service / library. Commits, branches, clones, etc. work across your whole code base rather then one part of it.\r\n\r\nThe oft cited example of a company using a MonoRepo is Google. They have their own bespoke source control system to enable this. Off the shelf systems have not handled it well historically, but I believe they are starting to catch up now.\r\n\r\n### Current Process\r\n\r\nTo describe the current work flow with a generic example, let’s assume we have an API and UI that consumes it. Within the API repository there is a client class library that is use to test the API and is consumed by callers of the API. This client is built, packaged and push to our package feed on every CI build of the API.\r\n\r\nIn order for someone to create a new API method and associated UI change, they need to;\r\n\r\n1. Create 1 branch on each repo.\r\n2. Create the new API method and associated client changes, with relevant tests.\r\n3. Reference a pre-release version of the API client generated by the CI build in the UI project.\r\n4. Test the API client with the UI project and repeat the cycle of fix code, build, reference new client, test UI.\r\n5. Raise pull request for API branch so it gets merged to master. Repeat the cycle again if any code review issues are raised.\r\n6. Reference the new client package generated from the master branch build following the pull request merge.\r\n7. Raise a pull request for the UI branch...\r\n\r\nI know it is possible to create a package locally for the API client and do a lot of testing prior to the CI build, but I generally don’t see that happening.\r\n\r\nAs you can see this process is not optimal. The same applies for other types of share libraries that are packaged (usually via nuget of npm in our case), not just API clients.\r\n\r\n### Why Consider MonoRepo\r\n\r\nThe MonoRepo solves this by directly referencing the API client or other shared library in the consumer. This allows all development and testing to happen locally in a fast cycle. Only one pull request is required and the changes are part of the same version.\r\n\r\nDon’t get me wrong, package managers like nuget are fantastic, they have served us well over the years and will continue to for third party components or components we develop that we will never change. However for components that do change, the management of that is becoming more onerous, especially as we continue to expand our code base.\r\n\r\nOther benefits of a MonoRepo are that it is easier to really share code. I find that despite good intentions, having separate teams working in separate repos means a lot of code duplication and a lack of shared libraries.\r\n\r\nI also believe a MonoRepo gives better visibility of dependency consumers. It allows us to easily trigger CI builds for consumers when a dependency is updated.\r\n\r\nOne of the biggest benefits I've seen so far in my experimentation is refactoring. It is so much easier to refactor code that would normally be avoided through fear of breaking something it is dependent on.\r\n\r\nSo in list form here are some benefits that I've noted so far;\r\n\r\n1. Simpler development process.\r\n2. Easier code review.\r\n3. Less package and versioning hell.\r\n4. More visibility of dependencies.\r\n5. More code sharing (and actually doing it).\r\n6. More robust CI builds, especially for API consumers.\r\n7. Refactoring is a lot less scary.\r\n8. Potential for simpler local development environments.\r\n9. Potential to reduce the number of test environments required.\r\n10. Better knowledge sharing.\r\n11. Does not force you to deploy all code simultaneously, we can still only deploy code that has been changed.\r\n\r\nI'm sure there are others I've not covered here.\r\n\r\n### Issues with a MonoRepo\r\n\r\nAs you can see my main motivation for considering moving to a MonoRepo is removing waste / bottle necks from our development process. However, I do have a number of concerns with making the switch that I fear may come back to bite me if I make the wrong call.\r\n\r\nExamples;\r\n\r\n1. The repository will become huge. Can git handle this? We haven’t hit any issues with testing so far. Hopefully with [GVFS](https://gvfs.io/){target=\"_blank\"} we have a mitigation for this.\r\n2. People forget to add build triggers for dependencies. This will come down to education, definition of done, code reviews and maybe some kind of audit.\r\n3. Nested project dependencies in Microsoft solutions require the project dependencies of project dependencies to be referenced for a successful build. This is just not very nice and will probably make some members of my team balk. I am hoping that the benefits out weigh the cons here, for example debugging will be a lot easier. Where possible, dependencies should be consolidated and merged also.\r\n4. Someone making a breaking change or not versioning an API they update. This is not MonoRepo specific, but could have a larger impact as all consumers get the latest version by default for their next deployment. Good automated testing and good practice (don’t make breaking changes) should make this go away.\r\n5. If you require permissions at the application or API level so that only certain developers can see certain bits of source code, you are going to struggle with a MonoRepo.\r\n6. A change to base library could result in most of your code being rebuilt and 'force' you to re-deploy it all at once. I'm not sure yet whether this would ever really occur, but it's certainly a risk.\r\n\r\n### Microsoft Specific Innovations\r\n\r\nSome things that have made moving to a MonoRepo a real possibility for us are;\r\n\r\n1. The latest project format from Microsoft means that Nuget references for project references are automatically restored for the consumer. Without this a package restore would need to be run on the dependency before the consumer could be built. All versions of .NET support the new project structure.\r\n2. Build triggers in TFS can be filtered at the folder level. This means that a build will only be triggered on a commit that impacts files that we care about for that application.\r\n3. Pull request policies in TFS allow specifying optional builds with folder level filters. Similar to 2, but for pull request triggered builds.\r\n4. Pull request polices allow specify specific teams or individuals for specific folders.\r\n5. [GVFS](https://gvfs.io/){target=\"_blank\"} makes me a lot less concerned about the size and growth of the single repository.\r\n6. Not critical this one, but certainly makes life easier. Cake builds that support the latest versions of dot net core and the new project structures. This means the same build steps can be run locally on a developers PC without committing any code.\r\n\r\n\r\n\r\n### Git History\r\n\r\nIf you are worried about losing your Git history when you merge repositories, don’t. Here is an example;\r\n\r\n1.    Clone the mono repo. Open a command prompt and navigate to your root source control folder, then run this command;\r\n\r\n```git\r\ngit clone http://[TFSOrVSTSUrl]:8080/tfs/[Collection]/[Project]/_git/[MonoRepoName]\r\n\r\ne.g. \r\n\r\nhttp://AcmeTFS:8080/tfs/Acme/Engineering/_git/MonoRepo\r\n\r\n```\r\n\r\n2.    Navigate into the MG repository. Add a remote to the repository you want to merge using this command;\r\n\r\n```git\r\ngit remote add -f [RemoteBranchName] [RemoteUrl]\r\n\r\ne.g.\r\n\r\ngit remote add -f queuing http://AcmeTFS:8080/tfs/Acme/Engineering/_git/AcmeQueueing\r\n```\r\n3.    Merge the repository into the MonoRepo using this command;\r\n\r\n```git\r\ngit merge [RemoteBranchName]/master --allow-unrelated-histories\r\n\r\ne.g.\r\n\r\ngit merge queueing/master --allow-unrelated-histories\r\n```\r\n\r\n4.    You now have the repository merged, but all the files are and folders are in the root directory. Create a new sub directory for the merged repository (e.g. md queueing).\r\n\r\n5.    Move the folders and files into the new sub directory. The easiest way to do this in Windows is by using TortoiseGit. Right click the folders and files and drag them into the directory. When the prompt comes up, select 'Git Move versioned files here'. Alternatively, you can use the 'git mv' command.\r\n\r\n**IMPORTANT! If you don't use Git to move the files and folders you will loose your history and defeat the point of the merge!**\r\n\r\n6.    Now you can commit and push the changes;\r\n\r\n```git\r\ngit commit -m \"Moved merged repository into a sub-folder\"\r\n\r\ngit push\r\n```\r\n\r\n### Conclusion\r\n\r\nI’m afraid this has turned into a bit of a ramble, so I will try to conclude.\r\n\r\nBased on my experimentation and the type of code base we work on, I think that a MonoRepo would suit us. The main benefits I see are shifting left and removing bottle necks from the delivery pipeline. There are no show stopping reasons not to give it a go anyway. Is it going be right for every team? No, probably not. My advice is to try it on a small scale and see what you think.\r\n\r\n",
    "author": "Jared Holgate",
    "published": true,
    "articleType": "standard"
}