{
    "id": 7,
    "title": "Deploying ASP.NET Core 2.0 Apps to IIS with On Premise TFS 2018 Update 1 Release Management",
    "date": "2018-04-04T00:00:00",
    "category": "Continuous Delivery",
    "tags": "TFS Release Management,ASP.NET Core 2.0,Deployments",
    "summary": "This article gives a real world example of deploying a .NET Core App to a VM running IIS using TFS 2018 Update 1 Release Management.",
    "content": "### Introduction\r\n\r\n***Please note this article is in draft and I'll update it in the coming days, but some of the bullet points there already may be useful to some people***\r\n\r\nThis article will detail how to setup a CI build and a deployment process to build and deploy an ASP.NET Core 2.0 to an IIS web server. It will details the pre-requisites for setting up the VM. For this article the VM setup will be manual steps, but a future article will automate them.\r\n\r\nThis article will refer to TFS and Visual Studio. In both cases that is the current latest versions of both, TFS 2018 Update 1 and Visual Studio 2017 15.6.\r\n\r\n### Initial Setup\r\n\r\nFirst of all we need something to deploy. So create a new ASP.NET Core 2.0 app in Visual Studio and commit to a Git repository in TFS. I'm not going to go into any details about that part as it's not the focus of the article. \r\n\r\nIf you are using TFS package management, then make sure you push all your nuget packages to TFS. Check both of these folders and push all the *.nupkg files;\r\n\r\n* c:\\user\\\\[my username]\\\\.nuget\\packages\r\n* c:\\program files\\dotnet\\sdk\\NuGetFallbackFolder\r\n\r\nYou might find this command helpful for pushing the packages;\r\n\r\n```for /r %i in (*) do nuget push \"%i\" -source http://[TfsUrl]:8080/tfs/[CollectionName]/_packaging/[FeedName]/nuget/v3/index.json -ApiKey key```\r\n\r\n\r\n### Creating a CI Build in TFS\r\n\r\nThe CI build needs 4 steps as a minimum;\r\n\r\n* Restore Packages\r\n* Build Solution\r\n* Publish Web App to Artifacts Staging Folder\r\n* Publish Artifacts\r\n\r\nIn my example I have also included;\r\n\r\n* Run Unit Tests\r\n* Copy Integration Tests to Artifacts Staging Folder\r\n\r\nI'll go through each of the steps here and show you how they are configured in my example;\r\n\r\n#### Restore Packages\r\n\r\n#### Build Solution\r\n\r\n#### Run Unit Tests\r\n\r\n#### Copy Integrations Tests to Artifacts Staging Folder\r\n\r\n#### Publish Web App to Artifacts Staging Folder\r\n\r\n#### Publish Artifacts\r\n\r\n### Setting Up the Target VM\r\n\r\nThe target VM needs the follow configuration. You can either use a tool like DSC, Puppet or Chef for this or do it manually;\r\n\r\n* IIS Feature Installed\r\n* .NET Core 2 Hosting Installed\r\n* WinRM enabled\r\n* An account with admin access (or the required access) that TFS Release Management can use\r\n* An IIS WebApp setup and configured\r\n\r\nI'll run through each of these steps and show you how they are done manually.\r\n\r\n#### IIS Feature Install\r\n\r\n#### .NET Core 2 Hosting Install\r\n\r\n#### WinRM Setup\r\n\r\n#### Account setup\r\n\r\n#### IIS WebApp setup and configuration\r\n\r\n### Creating a Deployment in TFS\r\n\r\nNow we need to setup a TFS Release definition to deploy the artifact generated in the CI build.\r\n\r\nThe deployment process only requires 2 steps;\r\n\r\n* Copy artifacts from build to the target server\r\n* Deploy the artifact to IIS\r\n\r\nI've also included the following step in my example;\r\n\r\n* Run Integration Tests\r\n\r\nI'll go through each of the steps here and show you how they are configured in my example;\r\n\r\n#### Copy artifacts from build to target server\r\n\r\n#### Deploy the artifact to IIS\r\n\r\n#### Run integration / smoke tests\r\n\r\n### Summary\r\n\r\nThis article (once completed) has shown you how to get a basic CI build and deployment setup for an ASP.NET Core 2.0 app in TFS. I've not covered every single detail here, so if there is anything I've missed that you need to know, please feel free to contact me.\r\n\r\n",
    "author": "Jared Holgate",
    "published": true,
    "articleType": "standard"
}